{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number of elements in X\n",
      "500\n",
      "Enter the number of classes\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import pandas as pd\n",
    "\n",
    "flag=0\n",
    "N=int(input(\"Enter the number of elements in X\\n\"))\n",
    "Xs=np.random.rand(1,N)\n",
    "X=Xs[0]\n",
    "q=int(input('Enter the number of classes\\n'))\n",
    "\n",
    "sigmas=np.random.rand(1,q)\n",
    "ms=np.random.rand(1,q)\n",
    "sigma=sigmas[0]\n",
    "m=ms[0]\n",
    "np.random.seed(0)\n",
    "alphas = np.arange(1,q+1)\n",
    "alpha=np.random.dirichlet(alphas)\n",
    "w=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "while True:\n",
    "    pi_joint=[]\n",
    "    for x in range (0,N):\n",
    "        pi_joint.append([])\n",
    "        for z in range (0,q):\n",
    "            temp=((alpha[z]*math.exp((-(X[x]-m[z])**2)/(2*sigma[z])))/(math.sqrt(2*np.pi*sigma[z])))\n",
    "            pi_joint[x].append(temp)\n",
    "            \n",
    "    alpha1=[]\n",
    "    sigma1=[]\n",
    "    m1=[]\n",
    "    for z in range (0,q):\n",
    "        alpha1.append(alpha[z])\n",
    "        sigma1.append(sigma[z])\n",
    "        m1.append(m[z])\n",
    "        \n",
    "    sum_joint=[]\n",
    "    temp1=0\n",
    "    for x in range(0,N):\n",
    "        for z in range(0,q):\n",
    "            temp1+=pi_joint[x][z]\n",
    "        sum_joint.append(temp1)\n",
    "        temp1=0\n",
    "        \n",
    "    temp2=0       \n",
    "    pi_conditional=[]\n",
    "    for x in range(0,N):\n",
    "        pi_conditional.append([])\n",
    "        for z in range(0,q):\n",
    "            temp2=(pi_joint[x][z])/sum_joint[x]\n",
    "            pi_conditional[x].append(temp2)\n",
    "    \n",
    "    sum_conditional=[]\n",
    "    temp3=0\n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):\n",
    "            temp3+=pi_conditional[x][z]\n",
    "        sum_conditional.append(temp3)\n",
    "        \n",
    "    for z in range(0,q):\n",
    "        alpha[z]=0\n",
    "        m[z]=0\n",
    "        sigma[z]=0\n",
    "    \n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):\n",
    "            alpha[z]+=pi_conditional[x][z]\n",
    "        alpha[z]=alpha[z]/N\n",
    "        \n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):        \n",
    "            m[z]+=(pi_conditional[x][z]*X[x])\n",
    "            sigma[z]+=(pi_conditional[x][z]*((X[x]-m[z])**2))\n",
    "        m[z]=m[z]/sum_conditional[z]\n",
    "        sigma[z]=sigma[z]/sum_conditional[z]\n",
    "        \n",
    "    error_alpha=[]\n",
    "    error_sigma=[]\n",
    "    error_m=[]\n",
    "        \n",
    "    for z in range(0,q):\n",
    "        error_sigma.append(abs(sigma[z]-sigma1[z]))\n",
    "        error_alpha.append(abs(alpha[z]-alpha1[z]))\n",
    "        error_m.append(abs(m[z]-m1[z]))\n",
    "    \n",
    "    for z in range(0,q):\n",
    "        if error_sigma[z]>=10**(-5):  \n",
    "            flag=0\n",
    "        elif error_alpha[z]>=10**(-5):\n",
    "            flag=0\n",
    "        elif error_m[z]>=10**(-5):\n",
    "            flag=0\n",
    "        else:\n",
    "            flag=1\n",
    "    w+=1\n",
    "    if flag==1:\n",
    "        break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The values of alpha on applying EM algorithm:\n",
      "\n",
      "[0.08380036 0.11023261 0.13046973 0.14756369 0.16265922 0.17633639\n",
      " 0.18893801]\n",
      "The values of mean m:\n",
      "\n",
      "[0.49240693 0.27966411 0.1979004  0.15385313 0.12612659 0.10700174\n",
      " 0.09298529]\n",
      "The values of variance:\n",
      "\n",
      "[131.71728372 131.67201643 131.63052105 131.60261515 131.58305396\n",
      " 131.5686633  131.55764835]\n"
     ]
    }
   ],
   "source": [
    "print('The values of alpha on applying EM algorithm:\\n')\n",
    "print(alpha)\n",
    "print('The values of mean m:\\n')\n",
    "print(m)\n",
    "print('The values of variance:\\n')\n",
    "print(sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The error values for alpha:\n",
      "\n",
      "[6.963887799749102e-11, 8.849786181652775e-11, 1.0344894385561076e-10, 1.1950943012983828e-10, 1.4732548514473365e-11, 1.0478540812819404e-09, 1.4142163828889665e-09]\n",
      "The error values for mean m:\n",
      "\n",
      "[7.92532706128668e-13, 4.101607942175178e-12, 3.1741276274033225e-12, 7.416289804496046e-14, 8.418207797511457e-11, 4.468113240507776e-10, 6.934796903390605e-10]\n",
      "The error values for the variance\n",
      "\n",
      "[2.2642538510808663e-07, 2.149810427454213e-07, 2.111108869939926e-07, 2.1708046915591694e-07, 1.1206367389604566e-07, 2.1369480975863553e-06, 2.978657221319736e-06]\n"
     ]
    }
   ],
   "source": [
    "print('The error values for alpha:\\n')\n",
    "print(error_alpha)\n",
    "print('The error values for mean m:\\n')\n",
    "print(error_m)\n",
    "print('The error values for the variance\\n')\n",
    "print(error_sigma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
