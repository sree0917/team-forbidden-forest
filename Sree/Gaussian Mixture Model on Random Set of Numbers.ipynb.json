{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number of elements in X\n",
      "500\n",
      "Enter the number of classes\n",
      "4\n",
      "Enter the number of iterations\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import pandas as pd\n",
    "\n",
    "flag=0\n",
    "N=int(input(\"Enter the number of elements in X\\n\"))\n",
    "Xs=np.random.rand(1,N)\n",
    "X=Xs[0]\n",
    "q=int(input('Enter the number of classes\\n'))\n",
    "\n",
    "sigmas=np.random.rand(1,q)\n",
    "ms=np.random.rand(1,q)\n",
    "sigma=sigmas[0]\n",
    "m=ms[0]\n",
    "np.random.seed(0)\n",
    "alphas = np.arange(1,q+1)\n",
    "alpha=np.random.dirichlet(alphas)\n",
    "w=0\n",
    "\n",
    "t=int(input('Enter the number of iterations\\n'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(t):\n",
    "    pi_joint=[]\n",
    "    for x in range (0,N):\n",
    "        pi_joint.append([])\n",
    "        for z in range (0,q):\n",
    "            temp=((alpha[z]*math.exp((-(X[x]-m[z])**2)/(2*sigma[z])))/(math.sqrt(2*np.pi*sigma[z])))\n",
    "            pi_joint[x].append(temp)\n",
    "    alpha1=[]\n",
    "    sigma1=[]\n",
    "    m1=[]\n",
    "    for z in range (0,q):\n",
    "        alpha1.append(alpha[z])\n",
    "        sigma1.append(sigma[z])\n",
    "        m1.append(m[z])\n",
    "    sum_joint=[]\n",
    "    temp1=0\n",
    "    for x in range(0,N):\n",
    "        for z in range(0,q):\n",
    "            temp1+=pi_joint[x][z]\n",
    "        sum_joint.append(temp1)\n",
    "        temp1=0\n",
    "    temp2=0       \n",
    "    pi_conditional=[]\n",
    "    for x in range(0,N):\n",
    "        pi_conditional.append([])\n",
    "        for z in range(0,q):\n",
    "            temp2=(pi_joint[x][z])/sum_joint[x]\n",
    "            pi_conditional[x].append(temp2)\n",
    "    sum_conditional=[]\n",
    "    temp3=0\n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):\n",
    "            temp3+=pi_conditional[x][z]\n",
    "        sum_conditional.append(temp3)\n",
    "    for z in range(0,q):\n",
    "        alpha[z]=0\n",
    "        m[z]=0\n",
    "        sigma[z]=0\n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):\n",
    "            alpha[z]+=pi_conditional[x][z]\n",
    "        alpha[z]=alpha[z]/N\n",
    "    for z in range(0,q):\n",
    "        for x in range(0,N):        \n",
    "            m[z]+=(pi_conditional[x][z]*X[x]/sum_conditional[z])\n",
    "            sigma[z]+=((pi_conditional[x][z]*((X[x]-m[z])**2))/sum_conditional[z])\n",
    "    error_alpha=[]\n",
    "    error_sigma=[]\n",
    "    error_m=[]\n",
    "        \n",
    "    '''for z in range(0,q):\n",
    "        error_sigma.append(abs(sigma[z]-sigma1[z]))\n",
    "        error_alpha.append(abs(alpha[z]-alpha1[z]))\n",
    "        error_m.append(abs(m[z]-m1[z]))\n",
    "    for z in range(0,q):\n",
    "        if error_sigma[z]>=10**(-6):  \n",
    "            flag=0\n",
    "        elif error_alpha[z]>=10**(-6):\n",
    "            flag=0\n",
    "        elif error_m[z]>=10**(-6):\n",
    "            flag=0\n",
    "        else:\n",
    "            flag=1\n",
    "    w+=1\n",
    "    if flag==1:\n",
    "        break'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The weights obtained on applying EM algorithm:\n",
      "[0.10716207 0.28362987 0.60920807 0.        ]\n",
      "The values of variance for each cluster:\n",
      "[0.2207731  0.15786904 0.10889188 0.        ]\n",
      "The values of mean for each cluster on iterating 8 times:\n",
      "[0.6637272  0.39362264 0.27056108 0.        ]\n"
     ]
    }
   ],
   "source": [
    "print('The weights obtained on applying EM algorithm:')\n",
    "print(alpha)\n",
    "print('The values of variance for each cluster:')\n",
    "print(sigma)\n",
    "print('The values of mean for each cluster on iterating '+str(t)+' times:')\n",
    "print(m)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
